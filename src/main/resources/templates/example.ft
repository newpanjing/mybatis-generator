package ${package}.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * ${modelRemark}</p>
 * ${modelName}Example
 * @author ${author}
 * @project wootop-entity
 */
public class ${modelName}Example {

    protected String orderByClause;

    protected boolean distinct;

    protected List<Criteria> oredCriteria;

    public ${modelName}Example() {

        oredCriteria = new ArrayList<Criteria>();
    }

    public void setOrderByClause(String orderByClause) {

        this.orderByClause = orderByClause;
    }

    public String getOrderByClause() {

        return orderByClause;
    }

    public void setDistinct(boolean distinct) {

        this.distinct = distinct;
    }

    public boolean isDistinct() {

        return distinct;
    }

    public List<Criteria> getOredCriteria() {

        return oredCriteria;
    }

    public void or(Criteria criteria) {

        oredCriteria.add(criteria);
    }

    public Criteria or() {

        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {

        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    protected Criteria createCriteriaInternal() {

        Criteria criteria = new Criteria();
        return criteria;
    }

    public void clear() {

        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    protected abstract static class GeneratedCriteria {

        protected List<Criterion> criteria;

        protected GeneratedCriteria() {

            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {

            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {

            return criteria;
        }

        public List<Criterion> getCriteria() {

            return criteria;
        }

        protected void addCriterion(String condition) {

            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {

            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {

            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        <#list columns as item>

        <#assign fieldName=item.fieldName?cap_first >

        public Criteria and${fieldName}IsNull() {

            addCriterion("${item.fieldName} is null");
            return (Criteria) this;
        }

        public Criteria and${fieldName}IsNotNull() {

            addCriterion("${item.fieldName} is not null");
            return (Criteria) this;
        }

        public Criteria and${fieldName}EqualTo(${item.typeName} value) {

            addCriterion("${item.name} =", value, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}NotEqualTo(${item.typeName} value) {

            addCriterion("${item.name} <>", value, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}GreaterThan(${item.typeName} value) {

            addCriterion("${item.name} >", value, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}GreaterThanOrEqualTo(${item.typeName} value) {

            addCriterion("${item.name} >=", value, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}LessThan(${item.typeName} value) {

            addCriterion("${item.name} <", value, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}LessThanOrEqualTo(${item.typeName} value) {

            addCriterion("${item.name} <=", value, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}Like(${item.typeName} value) {

            addCriterion("${item.name} like", value, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}NotLike(${item.typeName} value) {

            addCriterion("${item.name} not like", value, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}In(List<${item.typeName}> values) {

            addCriterion("${item.name} in", values, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}NotIn(List<${item.typeName}> values) {

            addCriterion("${item.name} not in", values, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}Between(${item.typeName} value1, ${item.typeName} value2) {

            addCriterion("${item.name} between", value1, value2, "${item.fieldName}");
            return (Criteria) this;
        }

        public Criteria and${fieldName}NotBetween(${item.typeName} value1, ${item.typeName} value2) {

            addCriterion("${item.name} not between", value1, value2, "${item.fieldName}");
            return (Criteria) this;
        }

        </#list>
    }

    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {

            super();
        }
    }

    public static class Criterion {

        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {

            return condition;
        }

        public Object getValue() {

            return value;
        }

        public Object getSecondValue() {

            return secondValue;
        }

        public boolean isNoValue() {

            return noValue;
        }

        public boolean isSingleValue() {

            return singleValue;
        }

        public boolean isBetweenValue() {

            return betweenValue;
        }

        public boolean isListValue() {

            return listValue;
        }

        public String getTypeHandler() {

            return typeHandler;
        }

        protected Criterion(String condition) {

            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {

            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {

            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {

            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {

            this(condition, value, secondValue, null);
        }
    }
}